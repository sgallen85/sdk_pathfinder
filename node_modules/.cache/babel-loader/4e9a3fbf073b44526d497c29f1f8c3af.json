{"ast":null,"code":"/**\n * This module is for general helper interfaces, types, and methods.\n */ /**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */export function distance(p1,p2){return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2)+Math.pow(p1.z-p2.z,2));}export function sweepIdToPoint(id,sweepData){return sweepData[id].position;}/**\n * Returns a number clamped to the given range.\n * @param {number} num The number to clamp.\n * @param {number} min The lower bound of the range.\n * @param {number} max The upper bound of the range.\n */export function clamp(num,min,max){return Math.min(Math.max(num,min),max);}export{};","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/utils.ts"],"names":["distance","p1","p2","Math","sqrt","x","y","z","sweepIdToPoint","id","sweepData","position","clamp","num","min","max"],"mappings":"AAEA;AACA;AACA,G,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASA,CAAAA,QAAT,CAAkBC,EAAlB,CAA+BC,EAA/B,CAAoD,CACzD,MAAOC,CAAAA,IAAI,CAACC,IAAL,CAAU,SAACH,EAAE,CAACI,CAAH,CAAOH,EAAE,CAACG,CAAX,CAAe,CAAf,WAAoBJ,EAAE,CAACK,CAAH,CAAOJ,EAAE,CAACI,CAA9B,CAAkC,CAAlC,WAAuCL,EAAE,CAACM,CAAH,CAAOL,EAAE,CAACK,CAAjD,CAAqD,CAArD,CAAV,CAAP,CACD,CAED,MAAO,SAASC,CAAAA,cAAT,CAAwBC,EAAxB,CAAoCC,SAApC,CAAqG,CAC1G,MAAOA,CAAAA,SAAS,CAACD,EAAD,CAAT,CAAcE,QAArB,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,KAAT,CAAeC,GAAf,CAA4BC,GAA5B,CAAyCC,GAAzC,CAA8D,CACnE,MAAOZ,CAAAA,IAAI,CAACW,GAAL,CAASX,IAAI,CAACY,GAAL,CAASF,GAAT,CAAcC,GAAd,CAAT,CAA6BC,GAA7B,CAAP,CACD,CAED","sourcesContent":["import { Dictionary, MpSdk, Vector3 } from \"../mp/sdk\";\n\n/**\n * This module is for general helper interfaces, types, and methods.\n */\n\n/**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */\nexport function distance(p1: Vector3, p2: Vector3): number {\n  return Math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2);\n}\n\nexport function sweepIdToPoint(id: string, sweepData: Dictionary<MpSdk.Sweep.ObservableSweepData>): Vector3 {\n  return sweepData[id].position;\n}\n\n/**\n * Returns a number clamped to the given range.\n * @param {number} num The number to clamp.\n * @param {number} min The lower bound of the range.\n * @param {number} max The upper bound of the range.\n */\nexport function clamp(num: number, min: number, max: number): number {\n  return Math.min(Math.max(num, min), max);\n}\n\nexport {};"]},"metadata":{},"sourceType":"module"}