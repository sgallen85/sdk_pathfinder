{"ast":null,"code":"/**\n * This module is for general helper interfaces, types, and methods.\n */\n\n/**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */\nexport function distance(p1, p2) {\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2 + (p1.z - p2.z) ** 2);\n}\nexport function sweepIdToPoint(id, sweepData) {\n  return sweepData[id].position;\n}\n/**\n * Returns a number clamped to the given range.\n * @param {number} num The number to clamp.\n * @param {number} min The lower bound of the range.\n * @param {number} max The upper bound of the range.\n */\n\nexport function clamp(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n}\nexport {};","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/utils.ts"],"names":["distance","p1","p2","Math","sqrt","x","y","z","sweepIdToPoint","id","sweepData","position","clamp","num","min","max"],"mappings":"AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,EAAlB,EAA+BC,EAA/B,EAAoD;AACzD,SAAOC,IAAI,CAACC,IAAL,CAAU,CAACH,EAAE,CAACI,CAAH,GAAOH,EAAE,CAACG,CAAX,KAAe,CAAf,GAAmB,CAACJ,EAAE,CAACK,CAAH,GAAOJ,EAAE,CAACI,CAAX,KAAe,CAAlC,GAAsC,CAACL,EAAE,CAACM,CAAH,GAAOL,EAAE,CAACK,CAAX,KAAe,CAA/D,CAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAAoCC,SAApC,EAAqG;AAC1G,SAAOA,SAAS,CAACD,EAAD,CAAT,CAAcE,QAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,GAAf,EAA4BC,GAA5B,EAAyCC,GAAzC,EAA8D;AACnE,SAAOZ,IAAI,CAACW,GAAL,CAASX,IAAI,CAACY,GAAL,CAASF,GAAT,EAAcC,GAAd,CAAT,EAA6BC,GAA7B,CAAP;AACD;AAED","sourcesContent":["import { Dictionary, MpSdk, Vector3 } from \"../mp/sdk\";\n\n/**\n * This module is for general helper interfaces, types, and methods.\n */\n\n/**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */\nexport function distance(p1: Vector3, p2: Vector3): number {\n  return Math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2);\n}\n\nexport function sweepIdToPoint(id: string, sweepData: Dictionary<MpSdk.Sweep.ObservableSweepData>): Vector3 {\n  return sweepData[id].position;\n}\n\n/**\n * Returns a number clamped to the given range.\n * @param {number} num The number to clamp.\n * @param {number} min The lower bound of the range.\n * @param {number} max The upper bound of the range.\n */\nexport function clamp(num: number, min: number, max: number): number {\n  return Math.min(Math.max(num, min), max);\n}\n\nexport {};"]},"metadata":{},"sourceType":"module"}