{"ast":null,"code":"var _jsxFileName = \"/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/overlay/ProgressBar.tsx\";\nimport React, { Component } from 'react';\nimport { clamp } from '../../utils';\nimport './ProgressBar.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROGRESS_BAR_THUMB_SIZE = '14px';\nexport default class ProgressBar extends Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n    this.trackRef = /*#__PURE__*/React.createRef();\n\n    this.onMouseDown = e => {\n      const {\n        onMouseDown,\n        onChange\n      } = this.props;\n      const ev = e;\n      if (ev.button !== 0) return;\n      const value = this.calculate(ev.clientX);\n      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(value);\n      onChange === null || onChange === void 0 ? void 0 : onChange(value);\n      this.setState({\n        value: value,\n        mouseDown: true\n      });\n    };\n\n    this.onMouseUp = e => {\n      const {\n        onMouseUp\n      } = this.props;\n      const {\n        value,\n        mouseDown\n      } = this.state;\n      const ev = e;\n      if (ev.button !== 0) return;\n\n      if (mouseDown) {\n        onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(value);\n      }\n\n      this.setState({\n        mouseDown: false\n      });\n    };\n\n    this.onMouseMove = e => {\n      const {\n        scrub,\n        onChange\n      } = this.props;\n      const {\n        mouseDown\n      } = this.state;\n      if (!scrub || !mouseDown) return;\n      const ev = e;\n      const value = this.calculate(ev.clientX);\n      this.setState({\n        value: value\n      }, () => onChange === null || onChange === void 0 ? void 0 : onChange(value));\n    };\n\n    const {\n      initValue\n    } = props;\n    this.state = {\n      value: initValue || 0,\n      mouseDown: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('mouseup', this.onMouseUp, {\n      signal: this.abortController.signal\n    });\n    window.addEventListener('mousemove', this.onMouseMove, {\n      signal: this.abortController.signal\n    });\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.overrideValue !== prevState.value && this.props.overrideValue) {\n      this.setState({\n        value: this.props.overrideValue\n      });\n    }\n  }\n  /**\n   * Calculates value of progress bar from mouse position.\n   * @param mx Mouse X position.\n   * @returns Clamped value based on min/max, or current value iff ref is undefined.\n   */\n\n\n  calculate(mx) {\n    const {\n      min,\n      max\n    } = this.props;\n    const {\n      value\n    } = this.state;\n    const track = this.trackRef.current;\n    if (!track) return value;\n    const rect = track.getBoundingClientRect();\n    const dx = mx - rect.left;\n    const total = rect.right - rect.left;\n    const frac = dx / total;\n    const range = max - min;\n    return clamp(frac * range, min, max);\n  }\n\n  render() {\n    const {\n      min,\n      max,\n      overrideValue,\n      noThumb\n    } = this.props;\n    const {\n      value,\n      mouseDown\n    } = this.state;\n    const frac = (overrideValue || value) / (max - min);\n    const percent = frac * 100;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-track-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-track\",\n          onMouseDown: this.onMouseDown,\n          ref: this.trackRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-progress\",\n            style: {\n              width: `${percent}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), !noThumb && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-thumb\",\n        style: {\n          width: PROGRESS_BAR_THUMB_SIZE,\n          height: PROGRESS_BAR_THUMB_SIZE,\n          left: `calc(${percent}% - (${PROGRESS_BAR_THUMB_SIZE}/2))`\n        },\n        onMouseDown: this.onMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pointer-event-overlay\",\n        style: {\n          position: 'fixed',\n          inset: '0',\n          pointerEvents: 'all',\n          display: mouseDown ? 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/overlay/ProgressBar.tsx"],"names":["React","Component","clamp","PROGRESS_BAR_THUMB_SIZE","ProgressBar","constructor","props","abortController","AbortController","trackRef","createRef","onMouseDown","e","onChange","ev","button","value","calculate","clientX","setState","mouseDown","onMouseUp","state","onMouseMove","scrub","initValue","componentDidMount","window","addEventListener","signal","componentWillUnmount","abort","componentDidUpdate","prevProps","prevState","overrideValue","mx","min","max","track","current","rect","getBoundingClientRect","dx","left","total","right","frac","range","render","noThumb","percent","width","height","position","inset","pointerEvents","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { clamp } from '../../utils';\nimport './ProgressBar.scss';\n\nconst PROGRESS_BAR_THUMB_SIZE = '14px';\n\ninterface ProgressBarProps {\n  min: number;\n  max: number;\n  initValue?: number;\n  overrideValue?: number;\n  scrub?: boolean;\n  step?: number;\n  noThumb?: boolean;\n  onMouseDown?: (value: number) => void;\n  onMouseUp?: (value: number) => void;\n  onChange?: (value: number) => void;\n}\n\ninterface ProgressBarState {\n  value: number; // will always match overrideValue when passed around (see componentdidUpdate)\n  mouseDown: boolean;\n}\n\nexport default class ProgressBar extends Component<ProgressBarProps, ProgressBarState> {\n  \n  private abortController = new AbortController();\n  private trackRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: ProgressBarProps) {\n    super(props);\n    const { initValue } = props;\n    \n    this.state = {\n      value: initValue || 0,\n      mouseDown: false,\n    }\n  }\n  \n  public componentDidMount() {\n    window.addEventListener(\n      'mouseup',\n      this.onMouseUp,\n      { signal: this.abortController.signal } as AddEventListenerOptions\n    );\n    window.addEventListener(\n      'mousemove',\n      this.onMouseMove,\n      { signal: this.abortController.signal } as AddEventListenerOptions\n    );\n  }\n\n  public componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  public componentDidUpdate(prevProps: ProgressBarProps, prevState: ProgressBarState) {\n    if (prevProps.overrideValue !== prevState.value && this.props.overrideValue) {\n      this.setState({ value: this.props.overrideValue });\n    }\n  }\n\n  /**\n   * Calculates value of progress bar from mouse position.\n   * @param mx Mouse X position.\n   * @returns Clamped value based on min/max, or current value iff ref is undefined.\n   */\n  private calculate(mx: number): number {\n    const { min, max } = this.props;\n    const { value } = this.state;\n    const track = this.trackRef.current;\n    if (!track) return value;\n\n    const rect = track.getBoundingClientRect();\n    const dx = mx - rect.left;\n    const total = rect.right - rect.left;\n    const frac = dx / total;\n    const range = max - min;\n    \n    return clamp(frac * range, min, max);\n  }\n\n  private onMouseDown = (e: any) => {\n    const { onMouseDown, onChange } = this.props;\n    const ev = e as MouseEvent;\n    if (ev.button !== 0) return;\n\n    const value = this.calculate(ev.clientX);\n    onMouseDown?.(value);\n    onChange?.(value);\n    this.setState({ value: value, mouseDown: true });\n  }\n\n  private onMouseUp = (e: any) => {\n    const { onMouseUp } = this.props;\n    const { value, mouseDown, } = this.state;\n    const ev = e as MouseEvent;\n    if (ev.button !== 0) return;\n\n    if (mouseDown) {\n      onMouseUp?.(value);\n    }\n    this.setState({ mouseDown: false });\n  }\n\n  private onMouseMove = (e: any) => {\n    const { scrub, onChange, } = this.props;\n    const { mouseDown } = this.state;\n    if (!scrub || !mouseDown) return;\n\n    const ev = e as MouseEvent;\n    const value = this.calculate(ev.clientX);\n    this.setState({ value: value }, () => onChange?.(value))\n  }\n\n  public render() {\n    const {\n      min,\n      max,\n      overrideValue,\n      noThumb,\n    } = this.props;\n    const {\n      value,\n      mouseDown\n    } = this.state;\n\n    const frac = (overrideValue || value) / (max - min);\n    const percent = frac * 100;\n\n    return (\n      <div className='progress-bar-container'>\n        <div className='progress-bar-track-container'>\n          <div\n            className='progress-bar-track'\n            onMouseDown={this.onMouseDown}\n            ref={this.trackRef}\n          >\n            <div\n              className='progress-bar-progress'\n              style={{\n                width: `${percent}%`\n              }}\n            ></div>\n          </div>\n        </div>\n        { !noThumb &&\n          <div\n            className='progress-bar-thumb'\n            style={{\n              width: PROGRESS_BAR_THUMB_SIZE,\n              height: PROGRESS_BAR_THUMB_SIZE,\n              left: `calc(${percent}% - (${PROGRESS_BAR_THUMB_SIZE}/2))`,\n            }}\n            onMouseDown={this.onMouseDown}\n          ></div>\n        }\n        {/* Needed so mousemove fires even when over the {pointer-events: none} canvas */}\n        <div className='pointer-event-overlay'\n          style={{\n            position: 'fixed',\n            inset: '0',\n            pointerEvents: 'all',\n            display: mouseDown ? 'block' : 'none',\n          }}\n        ></div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}