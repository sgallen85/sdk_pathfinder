{"ast":null,"code":"import { distance } from '../utils';\n\nclass PathRenderer {\n  constructor() {\n    this.material = void 0;\n    this.inputs = {\n      visible: false,\n      path: [],\n      // positions on path\n      radius: 0.15,\n      color: 0xff3158,\n      opacity: 0.5,\n      heightOffset: -1.1,\n      stepMultiplier: 5\n    };\n    this.context = void 0;\n    this.outputs = {\n      curve: null,\n      distance: 0\n    };\n\n    this.onInit = async () => {\n      const THREE = this.context.three;\n      const {\n        path,\n        radius,\n        heightOffset,\n        opacity,\n        color,\n        stepMultiplier\n      } = this.inputs; // check if path is long enough and no undefined points\n\n      if (path.length < 2 || !path.every(p => !!p)) return;\n      let d = 0;\n      const points = path.map((p, i) => {\n        if (i > 0) {\n          d += distance(path[i - 1], p);\n        }\n\n        return new THREE.Vector3(p.x, p.y + heightOffset, p.z);\n      });\n      const spline = new THREE.CatmullRomCurve3(points);\n      const extrudeSettings = {\n        steps: stepMultiplier * path.length,\n        bevelEnabled: false,\n        extrudePath: spline\n      }; // Shape to extrude\n\n      const arcShape = new THREE.Shape().absarc(0, 0, radius, 0, Math.PI * 2, false);\n      const extrudeGeometry = new THREE.ExtrudeGeometry(arcShape, extrudeSettings);\n      this.material = new THREE.MeshBasicMaterial({\n        color: color,\n        transparent: true,\n        opacity: opacity\n      });\n      const pathMesh = new THREE.Mesh(extrudeGeometry, this.material);\n      this.outputs.objectRoot = pathMesh;\n      this.outputs.curve = spline;\n      this.outputs.distance = d;\n    };\n\n    this.onEvent = function (_type, _data) {};\n\n    this.onInputsUpdated = function (_previous) {};\n\n    this.onTick = function (_tickDelta) {};\n\n    this.onDestroy = () => {\n      var _this$material;\n\n      (_this$material = this.material) === null || _this$material === void 0 ? void 0 : _this$material.dispose();\n    };\n  }\n\n}\n\nexport const pathRendererType = 'sdk-component.pathRenderer';\nexport function PathRendererFactory() {\n  return new PathRenderer();\n}\n_c = PathRendererFactory;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathRendererFactory\");","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/sdk-components/PathRenderer.ts"],"names":["distance","PathRenderer","material","inputs","visible","path","radius","color","opacity","heightOffset","stepMultiplier","context","outputs","curve","onInit","THREE","three","length","every","p","d","points","map","i","Vector3","x","y","z","spline","CatmullRomCurve3","extrudeSettings","steps","bevelEnabled","extrudePath","arcShape","Shape","absarc","Math","PI","extrudeGeometry","ExtrudeGeometry","MeshBasicMaterial","transparent","pathMesh","Mesh","objectRoot","onEvent","_type","_data","onInputsUpdated","_previous","onTick","_tickDelta","onDestroy","dispose","pathRendererType","PathRendererFactory"],"mappings":"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","sourcesContent":["import { Color, Vector3 } from '../../mp/sdk';\nimport { distance } from '../utils';\n\ninterface PathRendererInputs {\n  visible: boolean;\n  path: Vector3[];\n  radius: number;\n  color: Color | number;\n  opacity: number;\n  heightOffset: number;\n  stepMultiplier: number;\n}\n\ninterface PathRendererOutputs {\n  objectRoot: any;\n  curve: any;\n  distance: number;\n}\n\nclass PathRenderer {\n\n  private material: any;\n\n  private inputs: PathRendererInputs = {\n    visible: false,\n    path: [], // positions on path\n    radius: 0.15,\n    color: 0xff3158,\n    opacity: 0.5,\n    heightOffset: -1.1,\n    stepMultiplier: 5,\n  };\n\n  private context: any;\n\n  private outputs = {\n    curve: null,\n    distance: 0,\n  } as PathRendererOutputs;\n\n  public onInit = async () => {\n\n    const THREE = this.context.three;\n\n    const { path,\n            radius,\n            heightOffset,\n            opacity,\n            color,\n            stepMultiplier } = this.inputs;\n\n    // check if path is long enough and no undefined points\n    if (path.length < 2 || !path.every(p => !!p)) return;\n    \n    let d = 0;\n    const points = path.map((p, i) => {\n      if (i > 0) {\n        d += distance(path[i-1], p);\n      }\n      return new THREE.Vector3(p.x, p.y+heightOffset, p.z);\n    });\n    const spline = new THREE.CatmullRomCurve3(points);\n\n    const extrudeSettings = {\n        steps: stepMultiplier * path.length,\n        bevelEnabled: false,\n        extrudePath: spline,\n    };\n\n    // Shape to extrude\n    const arcShape = new THREE.Shape().absarc(0, 0, radius, 0, Math.PI * 2, false);\n    \n    const extrudeGeometry = new THREE.ExtrudeGeometry( arcShape, extrudeSettings );\n    \n    this.material = new THREE.MeshBasicMaterial({\n        color: color as number,\n        transparent: true,\n        opacity: opacity,\n    });\n\n    const pathMesh = new THREE.Mesh(extrudeGeometry, this.material);\n\n    this.outputs.objectRoot = pathMesh;\n    this.outputs.curve = spline;\n    this.outputs.distance = d;\n  };\n\n  public onEvent = function(_type: any, _data: any) {\n  }\n\n  public onInputsUpdated = function(_previous: any) {\n  };\n\n  public onTick = function(_tickDelta: any) {\n  };\n\n  public onDestroy = () => {\n    this.material?.dispose();\n  };\n}\n\nexport const pathRendererType = 'sdk-component.pathRenderer';\nexport function PathRendererFactory() {\n  return new PathRenderer();\n}"]},"metadata":{},"sourceType":"module"}