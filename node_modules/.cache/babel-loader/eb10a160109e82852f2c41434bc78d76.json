{"ast":null,"code":"var _jsxFileName = \"/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/overlay/ControlsOverlay.tsx\";\nimport { Component } from 'react';\nimport Icon from '../../reusables/icon/Icon';\nimport './ControlsOverlay.scss';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ControlsOverlay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onScrubMouseDown = () => {\n      this.props.onPause();\n    };\n\n    this.onScrubMouseUp = () => {\n      if (this.state.rememberPlayState) {\n        this.props.onPlay();\n      }\n    };\n\n    this.togglePlay = () => {\n      const {\n        playing,\n        onPlay,\n        onPause\n      } = this.props;\n      playing ? onPause() : onPlay();\n      this.setState({\n        rememberPlayState: !playing\n      });\n    };\n\n    this.state = {\n      rememberPlayState: true\n    };\n  }\n\n  render() {\n    const {\n      playing,\n      onExit,\n      setU,\n      u\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-overlay-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n          min: 0,\n          max: 1,\n          scrub: true,\n          onChange: setU,\n          onMouseDown: this.onScrubMouseDown,\n          onMouseUp: this.onScrubMouseUp,\n          overrideValue: u\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"control-button play-button\",\n            onClick: this.togglePlay,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              icon: playing ? 'showcase-pause-lg' : 'showcase-play-lg',\n              classes: \"play-pause-button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"control-button exit-button\",\n            onClick: onExit,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              icon: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/overlay/ControlsOverlay.tsx"],"names":["Component","Icon","ProgressBar","ControlsOverlay","constructor","props","onScrubMouseDown","onPause","onScrubMouseUp","state","rememberPlayState","onPlay","togglePlay","playing","setState","render","onExit","setU","u"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAO,wBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAeA,eAAe,MAAMC,eAAN,SAA8BH,SAA9B,CAAoF;AAEjGI,EAAAA,WAAW,CAACC,KAAD,EAA8B;AACvC,UAAMA,KAAN;;AADuC,SAOjCC,gBAPiC,GAOd,MAAM;AAC/B,WAAKD,KAAL,CAAWE,OAAX;AACD,KATwC;;AAAA,SAWjCC,cAXiC,GAWf,MAAM;AAC9B,UAAI,KAAKC,KAAL,CAAWC,iBAAf,EAAkC;AAChC,aAAKL,KAAL,CAAWM,MAAX;AACD;AACF,KAfwC;;AAAA,SAiBjCC,UAjBiC,GAiBpB,MAAM;AACzB,YAAM;AAAEC,QAAAA,OAAF;AAAWF,QAAAA,MAAX;AAAmBJ,QAAAA;AAAnB,UAA+B,KAAKF,KAA1C;AACAQ,MAAAA,OAAO,GAAGN,OAAO,EAAV,GAAeI,MAAM,EAA5B;AACA,WAAKG,QAAL,CAAc;AAAEJ,QAAAA,iBAAiB,EAAE,CAACG;AAAtB,OAAd;AACD,KArBwC;;AAEvC,SAAKJ,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGD;;AAkBMK,EAAAA,MAAM,GAAG;AACd,UAAM;AAAEF,MAAAA,OAAF;AAAWG,MAAAA,MAAX;AAAmBC,MAAAA,IAAnB;AAAyBC,MAAAA;AAAzB,QAA+B,KAAKb,KAA1C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE,QAAC,WAAD;AACE,UAAA,GAAG,EAAE,CADP;AAEE,UAAA,GAAG,EAAE,CAFP;AAGE,UAAA,KAAK,EAAE,IAHT;AAIE,UAAA,QAAQ,EAAEY,IAJZ;AAKE,UAAA,WAAW,EAAE,KAAKX,gBALpB;AAME,UAAA,SAAS,EAAE,KAAKE,cANlB;AAOE,UAAA,aAAa,EAAEU;AAPjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAQ,YAAA,IAAI,EAAC,QAAb;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKN,UAFhB;AAAA,mCAIE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAEC,OAAO,GAAG,mBAAH,GAAyB,kBAA5C;AAAgE,cAAA,OAAO,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,4BAAhC;AAA6D,YAAA,OAAO,EAAEG,MAAtE;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AAvDgG","sourcesContent":["import { Component } from 'react';\nimport Icon from '../../reusables/icon/Icon';\nimport './ControlsOverlay.scss';\nimport ProgressBar from './ProgressBar';\n\ninterface ControlsOverlayProps {\n  playing: boolean;\n  onPlay: () => void;\n  onPause: () => void;\n  onExit: () => void;\n  setU: (u: number) => void;\n  u: number;\n}\n\ninterface ControlsOverlayState {\n  rememberPlayState: boolean;\n}\n\nexport default class ControlsOverlay extends Component<ControlsOverlayProps, ControlsOverlayState> {\n\n  constructor(props: ControlsOverlayProps) {\n    super(props);\n    this.state = {\n      rememberPlayState: true,\n    }\n  }\n\n  private onScrubMouseDown = () => {\n    this.props.onPause();\n  }\n\n  private onScrubMouseUp  = () => {\n    if (this.state.rememberPlayState) {\n      this.props.onPlay();\n    }\n  }\n\n  private togglePlay = () => {\n    const { playing, onPlay, onPause } = this.props;\n    playing ? onPause() : onPlay();\n    this.setState({ rememberPlayState: !playing })\n  }\n\n  public render() {\n    const { playing, onExit, setU, u } = this.props;\n\n    return (\n      <div className='controls-overlay-container'>\n        <div className='controls-overlay'>\n          <ProgressBar\n            min={0}\n            max={1}\n            scrub={true}\n            onChange={setU}\n            onMouseDown={this.onScrubMouseDown}\n            onMouseUp={this.onScrubMouseUp}\n            overrideValue={u}\n          />\n          <div className='control-button-container'>\n            <button type='button'\n              className='control-button play-button'\n              onClick={this.togglePlay}\n            >\n              <Icon icon={playing ? 'showcase-pause-lg' : 'showcase-play-lg'} classes='play-pause-button' />\n            </button>\n            <button type='button' className='control-button exit-button' onClick={onExit}>\n              <Icon icon='close' />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n}"]},"metadata":{},"sourceType":"module"}