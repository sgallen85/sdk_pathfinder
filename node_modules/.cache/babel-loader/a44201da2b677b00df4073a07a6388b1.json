{"ast":null,"code":"var _jsxFileName = \"/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/Menu.tsx\";\nimport { Component } from 'react';\nimport './Menu.scss';\nimport Accordion from '../reusables/accordion/Accordion';\nimport AccordionGroup from '../reusables/accordion/AccordionGroup';\nimport AccordionItem from '../reusables/accordion/AccordionItem';\nimport Icon from '../reusables/icon/Icon';\nimport MenuNudge from './MenuNudge';\nimport { LanguageOptions, loc } from '../Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Time (ms) until nudge displays\n */\nconst MENU_NUDGE_TIMEOUT = 2000;\n/**\n * Key name for browser storage of whether nudge has been seen (close button clicked)\n */\n\nconst MENU_NUDGE_SEEN_KEY = 'menu_nudge_seen';\n/**\n * Component for UI elements like sweep selector, location info, etc.\n */\n\nexport default class Menu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onCloseNudge = () => {\n      sessionStorage.setItem(MENU_NUDGE_SEEN_KEY, 'true');\n      this.setState({\n        displayNudge: false\n      });\n    };\n\n    this.state = {\n      sweepGroups: {},\n      displayNudge: false\n    };\n  }\n\n  componentDidMount() {\n    const nudgeSeen = sessionStorage.getItem(MENU_NUDGE_SEEN_KEY);\n\n    if (!nudgeSeen || nudgeSeen === 'false') {\n      window.setTimeout(() => {\n        this.setState({\n          displayNudge: true\n        });\n      }, MENU_NUDGE_TIMEOUT);\n    }\n  }\n\n  getGroups() {\n    const {\n      sweepData,\n      sweepAlias\n    } = this.props;\n    const groups = {};\n\n    for (const s of sweepData) {\n      if (sweepAlias && !(s.sid in sweepAlias)) continue; // skip sweeps without alias, if available\n\n      const floor = '' + s.floor;\n\n      if (!(floor in groups)) {\n        groups[floor] = [];\n      }\n\n      groups[floor].push(s);\n    }\n\n    return groups;\n  }\n\n  renderItem(s) {\n    const {\n      lang,\n      onChange,\n      selectedSweepId,\n      sweepAlias\n    } = this.props;\n    const {\n      sid\n    } = s;\n    const name = sweepAlias ? loc(sweepAlias[sid], lang) : sid; // replace sid with alias, if available\n\n    return /*#__PURE__*/_jsxDEV(AccordionItem, {\n      header: name,\n      onClick: () => onChange(sid),\n      selected: sid === selectedSweepId\n    }, sid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n  /**\n   * Renders sweeps grouped by floors.\n   * @returns List of `<AccordionGroup>` with items inside.\n   */\n\n\n  renderGroups() {\n    const {\n      lang,\n      selectedSweepId,\n      floorMap\n    } = this.props;\n    const sweepGroups = this.getGroups();\n    const floors = [];\n    let selectedFloor = undefined;\n\n    for (const [floor, sweeps] of Object.entries(sweepGroups)) {\n      var _floorMap$floor, _floorMap$floor2;\n\n      if (!(floor in floors)) floors[floor] = [];\n      const items = [];\n\n      for (const s of sweeps) {\n        items.push(this.renderItem(s));\n\n        if (s.sid === selectedSweepId) {\n          selectedFloor = s.floor;\n        }\n      }\n\n      const floorName = floorMap === null || floorMap === void 0 ? void 0 : (_floorMap$floor = floorMap[floor]) === null || _floorMap$floor === void 0 ? void 0 : _floorMap$floor.name;\n      const floorSequence = floorMap === null || floorMap === void 0 ? void 0 : (_floorMap$floor2 = floorMap[floor]) === null || _floorMap$floor2 === void 0 ? void 0 : _floorMap$floor2.sequence; // use floor name, 1-indexed sequence, id in that order of priority\n\n      const header = floorName || floorSequence !== undefined && `${loc('Floor', lang)} ${floorSequence + 1}` || floor;\n      floors.push( /*#__PURE__*/_jsxDEV(AccordionGroup, {\n        header: header,\n        expanded: !!selectedFloor && '' + selectedFloor === floor,\n        showNumber: true,\n        children: items\n      }, floor, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this));\n    }\n\n    return floors;\n  }\n\n  renderLanguageSelect() {\n    const langOptions = [];\n\n    for (const {\n      code,\n      text\n    } of Object.values(LanguageOptions)) {\n      langOptions.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: code,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 24\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"language-select\",\n        onChange: this.props.onChangeLang,\n        children: langOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const {\n      lang,\n      onClose\n    } = this.props;\n    const {\n      displayNudge\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu-header-text header-font\",\n          children: loc('Locations', lang)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), this.renderLanguageSelect(), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"menu-close-button\",\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            icon: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        children: this.renderGroups()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), displayNudge && /*#__PURE__*/_jsxDEV(MenuNudge, {\n        text: loc('nudge_text', lang),\n        closeText: loc('CLOSE', lang),\n        onClose: this.onCloseNudge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/ui/Menu.tsx"],"names":["Component","Accordion","AccordionGroup","AccordionItem","Icon","MenuNudge","LanguageOptions","loc","MENU_NUDGE_TIMEOUT","MENU_NUDGE_SEEN_KEY","Menu","constructor","props","onCloseNudge","sessionStorage","setItem","setState","displayNudge","state","sweepGroups","componentDidMount","nudgeSeen","getItem","window","setTimeout","getGroups","sweepData","sweepAlias","groups","s","sid","floor","push","renderItem","lang","onChange","selectedSweepId","name","renderGroups","floorMap","floors","selectedFloor","undefined","sweeps","Object","entries","items","floorName","floorSequence","sequence","header","renderLanguageSelect","langOptions","code","text","values","marginLeft","onChangeLang","render","onClose"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { Dictionary, MpSdk, Sweep } from '../../mp/sdk';\nimport './Menu.scss';\nimport Accordion from '../reusables/accordion/Accordion';\nimport AccordionGroup from '../reusables/accordion/AccordionGroup';\nimport AccordionItem from '../reusables/accordion/AccordionItem';\nimport { SweepAlias } from '../sweepAliases';\nimport Icon from '../reusables/icon/Icon';\nimport MenuNudge from './MenuNudge';\nimport { LanguageOptions, loc } from '../Localization';\n\ninterface MenuProps {\n  lang: string;\n  currSweepId?: string;\n  selectedSweepId?: string;\n  sweepData: Sweep.SweepData[];\n  sweepAlias?: SweepAlias;\n  floorMap?: Dictionary<MpSdk.Floor.FloorData>;\n  onChange: (e: any) => void;\n  onClose: () => void;\n  onChangeLang: (e: any) => void;\n}\n\ninterface MenuState {\n  sweepGroups: SweepGroups;\n  displayNudge: boolean;\n}\n\ninterface SweepGroups {\n  [group: string]: Sweep.SweepData[];\n}\n\n/**\n * Time (ms) until nudge displays\n */\nconst MENU_NUDGE_TIMEOUT = 2000;\n/**\n * Key name for browser storage of whether nudge has been seen (close button clicked)\n */\nconst MENU_NUDGE_SEEN_KEY = 'menu_nudge_seen';\n\n/**\n * Component for UI elements like sweep selector, location info, etc.\n */\nexport default class Menu extends Component<MenuProps, MenuState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      sweepGroups: {},\n      displayNudge: false,\n    };    \n  }\n\n  public componentDidMount() {\n    const nudgeSeen = sessionStorage.getItem(MENU_NUDGE_SEEN_KEY);\n    if (!nudgeSeen || nudgeSeen === 'false') {\n      window.setTimeout(() => {\n        this.setState({\n          displayNudge: true,\n        });\n      }, MENU_NUDGE_TIMEOUT);\n    }\n  }\n\n  private onCloseNudge = () => {\n    sessionStorage.setItem(MENU_NUDGE_SEEN_KEY, 'true');\n    this.setState({\n      displayNudge: false,\n    });\n  }\n\n  private getGroups() {\n    const { sweepData, sweepAlias } = this.props;\n    const groups: SweepGroups = {};\n    for (const s of sweepData) {\n      if (sweepAlias && !(s.sid in sweepAlias)) continue; // skip sweeps without alias, if available\n      const floor = '' + s.floor;\n      if (!(floor in groups)) {\n        groups[floor] = [];\n      }\n      groups[floor].push(s);\n    }\n    return groups;\n  }\n\n  private renderItem(s: Sweep.SweepData) {\n    const { lang, onChange, selectedSweepId, sweepAlias } = this.props;\n    const { sid } = s;\n    const name = sweepAlias ? loc(sweepAlias[sid], lang) : sid; // replace sid with alias, if available\n    return (\n      <AccordionItem\n        header={name}\n        onClick={() => onChange(sid)}\n        selected={sid === selectedSweepId}\n        key={sid}\n      />\n    );\n  }\n\n  /**\n   * Renders sweeps grouped by floors.\n   * @returns List of `<AccordionGroup>` with items inside.\n   */\n  private renderGroups() {\n    const { lang, selectedSweepId, floorMap } = this.props;\n    const sweepGroups = this.getGroups();\n    const floors: any = [];\n    let selectedFloor = undefined;\n\n    for (const [floor, sweeps] of Object.entries(sweepGroups)) {\n      if (!(floor in floors)) floors[floor] = [];\n      \n      const items = []\n      for (const s of sweeps) {\n        items.push(this.renderItem(s));\n        if (s.sid === selectedSweepId) {\n          selectedFloor = s.floor;\n        }\n      }\n\n      const floorName = floorMap?.[floor]?.name;\n      const floorSequence = floorMap?.[floor]?.sequence;\n\n      // use floor name, 1-indexed sequence, id in that order of priority\n      const header = floorName ||\n        (floorSequence !== undefined && `${loc('Floor', lang)} ${floorSequence+1}`) ||\n        floor;\n\n      floors.push(\n        <AccordionGroup\n          header={header}\n          expanded={!!selectedFloor && ''+selectedFloor === floor}\n          showNumber={true}\n          key={floor}\n        >\n          {items}\n        </AccordionGroup>\n      );\n    }\n    return floors;\n  }\n\n  public renderLanguageSelect() {\n    const langOptions = [];\n    for (const {code, text} of Object.values(LanguageOptions)) {\n      langOptions.push(<option value={code}>{text}</option>);\n    }\n    return (\n      <div style={{ marginLeft: 'auto' }}>\n        <select\n          className='language-select'\n          onChange={this.props.onChangeLang}\n        >\n          {langOptions}\n        </select>\n      </div>\n    );\n  }\n  \n  public render() {\n    const { lang, onClose } = this.props;\n    const { displayNudge } = this.state;\n    return (\n      <div className='menu'>\n        <div className='menu-header'>\n          <div className='menu-header-text header-font'>{loc('Locations', lang)}</div>\n          {this.renderLanguageSelect()}\n          <button type='button' className='menu-close-button' onClick={onClose}>\n            <Icon icon='close' />\n          </button>\n        </div>\n        <Accordion>\n          {this.renderGroups()}\n        </Accordion>\n        { displayNudge &&\n          <MenuNudge\n            text={loc('nudge_text', lang)}\n            closeText={loc('CLOSE', lang)}\n            onClose={this.onCloseNudge}\n          />\n        }\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}