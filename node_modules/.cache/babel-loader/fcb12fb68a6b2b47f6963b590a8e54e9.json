{"ast":null,"code":"const SDK_VERSION = '3.2';\n/**\n * Gets a reference to the SDK. Use this if you want to do SDK stuff.\n * @param {string | HTMLIFrameElement} elementId ID of the iframe or the iframe element itself\n * @param {string} applicationKey Your API key \n * @returns Promise of MpSdk reference\n */\n\nexport const GetSDK = function (elementId, applicationKey) {\n  return new Promise(function (resolve, reject) {\n    const checkIframe = async function () {\n      let iframe = null;\n\n      if (elementId instanceof HTMLIFrameElement) {\n        iframe = elementId;\n      } else {\n        iframe = document.getElementById(elementId);\n      }\n\n      if (iframe) {\n        // sometimes this is undefined for some reason, so check for it\n        const sdkWindow = (await iframe.contentWindow).MP_SDK;\n\n        if (sdkWindow) {\n          clearInterval(intervalId);\n          const sdk = sdkWindow.connect(iframe, applicationKey, SDK_VERSION);\n          resolve(sdk);\n        }\n      }\n    };\n\n    const intervalId = setInterval(checkIframe, 100);\n  });\n};\n_c = GetSDK;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetSDK\");","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/mp/GetSDK.ts"],"names":["SDK_VERSION","GetSDK","elementId","applicationKey","Promise","resolve","reject","checkIframe","iframe","HTMLIFrameElement","document","getElementById","sdkWindow","contentWindow","MP_SDK","clearInterval","intervalId","sdk","connect","setInterval"],"mappings":"AAEA,MAAMA,WAAW,GAAG,KAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,UAASC,SAAT,EAAgDC,cAAhD,EAAwF;AAC5G,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAMC,WAAW,GAAG,kBAAiB;AACnC,UAAIC,MAAM,GAAG,IAAb;;AACA,UAAIN,SAAS,YAAYO,iBAAzB,EAA4C;AAC1CD,QAAAA,MAAM,GAAGN,SAAT;AACD,OAFD,MAGK;AACHM,QAAAA,MAAM,GAAGE,QAAQ,CAACC,cAAT,CAAwBT,SAAxB,CAAT;AACD;;AAED,UAAIM,MAAJ,EAAY;AACV;AACA,cAAMI,SAAS,GAAG,CAAC,MAAMJ,MAAM,CAACK,aAAd,EAAoDC,MAAtE;;AACA,YAAIF,SAAJ,EAAe;AACbG,UAAAA,aAAa,CAACC,UAAD,CAAb;AACA,gBAAMC,GAAG,GAAGL,SAAS,CAACM,OAAV,CAAkBV,MAAlB,EAA0BL,cAA1B,EAA0CH,WAA1C,CAAZ;AACAK,UAAAA,OAAO,CAACY,GAAD,CAAP;AACD;AACF;AACF,KAlBD;;AAmBA,UAAMD,UAAU,GAAGG,WAAW,CAACZ,WAAD,EAAc,GAAd,CAA9B;AACD,GArBM,CAAP;AAsBD,CAvBM;KAAMN,M","sourcesContent":["import { MpSdk, ShowcaseEmbedWindow } from './sdk';\n\nconst SDK_VERSION = '3.2';\n\n/**\n * Gets a reference to the SDK. Use this if you want to do SDK stuff.\n * @param {string | HTMLIFrameElement} elementId ID of the iframe or the iframe element itself\n * @param {string} applicationKey Your API key \n * @returns Promise of MpSdk reference\n */\nexport const GetSDK = function(elementId: string | HTMLIFrameElement, applicationKey: string): Promise<MpSdk> {\n  return new Promise(function(resolve, reject) {\n    const checkIframe = async function() {\n      let iframe = null;\n      if (elementId instanceof HTMLIFrameElement) {\n        iframe = elementId as HTMLIFrameElement;\n      }\n      else {\n        iframe = document.getElementById(elementId) as HTMLIFrameElement;\n      }\n\n      if (iframe) {\n        // sometimes this is undefined for some reason, so check for it\n        const sdkWindow = (await iframe.contentWindow as ShowcaseEmbedWindow).MP_SDK;\n        if (sdkWindow) {\n          clearInterval(intervalId);\n          const sdk = sdkWindow.connect(iframe, applicationKey, SDK_VERSION);\n          resolve(sdk);\n        }\n      }\n    };\n    const intervalId = setInterval(checkIframe, 100);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}