{"ast":null,"code":"export default class Translator {\n  constructor(lang) {\n    this.url = \"https://api-free.deepl.com/v2/translate\";\n    this.key = \"1fa4cd0a-7872-2cc0-e6e3-e96c6587ca62:fx\";\n    this.url += `?auth_key=${this.key}&target_lang=${lang}`;\n  }\n  /**\n   * Smoketest for DeepL HTTP requests\n   */\n  // public testQuery(): boolean {\n  //   const xhr = new XMLHttpRequest();\n  //   let query = this.url + `&text=`;\n  //   xhr.open(\"GET\", query, false); // synchronous request\n  //   xhr.send(); \n  //   let status = xhr.status;\n  //   return status === 0 || (status >= 200 && status < 400);\n  // }\n\n\n  checkUsage() {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", `https://api-free.deepl.com/v2/usage?auth_key=${this.key}`);\n\n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n\n        if (status === 0 || status >= 200 && status < 400) {\n          console.log(\"DeepL Usage:\", xhr.responseText);\n        } else {\n          console.error(\"Usage retrieval failed.\");\n        }\n      }\n    };\n\n    xhr.send();\n  }\n  /**\n   * Translate using DeepL via HTTP request\n   * @param texts List of strings to translate\n   * @param callBack Callback handling translated strings\n   */\n\n\n  translate(texts, callBack) {\n    const xhr = new XMLHttpRequest();\n    let query = this.url;\n\n    for (let i = 0; i < texts.length; i++) {\n      query += `&text=${texts[i]}`;\n    }\n\n    xhr.open(\"GET\", query);\n\n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n\n        if (status === 0 || status >= 200 && status < 400) {\n          const json = xhr.responseText;\n          callBack(this.parse(json));\n        } else {\n          console.error(\"Translation failed.\");\n        }\n      }\n    };\n\n    xhr.send();\n  }\n  /**\n   * Parse the JSON received from DeepL. Returns translated texts, as a list.\n   */\n\n\n  parse(json) {\n    const obj = JSON.parse(json);\n    const transTexts = [];\n\n    for (let i = 0; i < obj.translations.length; i++) {\n      transTexts.push(obj.translations[i].text);\n    }\n\n    return transTexts;\n  }\n\n}","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/Translator.ts"],"names":["Translator","constructor","lang","url","key","checkUsage","xhr","XMLHttpRequest","open","onload","readyState","status","console","log","responseText","error","send","translate","texts","callBack","query","i","length","json","parse","obj","JSON","transTexts","translations","push","text"],"mappings":"AAAA,eAAe,MAAMA,UAAN,CAAiB;AAK9BC,EAAAA,WAAW,CAACC,IAAD,EAAe;AAAA,SAHlBC,GAGkB,GAHJ,yCAGI;AAAA,SAFlBC,GAEkB,GAFJ,yCAEI;AACxB,SAAKD,GAAL,IAAa,aAAY,KAAKC,GAAI,gBAAeF,IAAK,EAAtD;AACD;AAED;AACF;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEOG,EAAAA,UAAU,GAAS;AACxB,UAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAiB,gDAA+C,KAAKJ,GAAI,EAAzE;;AACAE,IAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACjB,UAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,cAAMC,MAAM,GAAGL,GAAG,CAACK,MAAnB;;AACA,YAAIA,MAAM,KAAK,CAAX,IAAiBA,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA/C,EAAqD;AACnDC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BP,GAAG,CAACQ,YAAhC;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAACG,KAAR,CAAc,yBAAd;AACD;AACF;AACF,KATD;;AAUAT,IAAAA,GAAG,CAACU,IAAJ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACSC,EAAAA,SAAS,CACdC,KADc,EAEdC,QAFc,EAGf;AACC,UAAMb,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAIa,KAAK,GAAG,KAAKjB,GAAjB;;AACA,SAAK,IAAIkB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,KAAK,CAACI,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjCD,MAAAA,KAAK,IAAK,SAAQF,KAAK,CAACG,CAAD,CAAI,EAA3B;AACD;;AACDf,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBY,KAAhB;;AACAd,IAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACjB,UAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,cAAMC,MAAM,GAAGL,GAAG,CAACK,MAAnB;;AACA,YAAIA,MAAM,KAAK,CAAX,IAAiBA,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA/C,EAAqD;AACnD,gBAAMY,IAAI,GAAGjB,GAAG,CAACQ,YAAjB;AACAK,UAAAA,QAAQ,CAAC,KAAKK,KAAL,CAAWD,IAAX,CAAD,CAAR;AACD,SAHD,MAGO;AACLX,UAAAA,OAAO,CAACG,KAAR,CAAc,qBAAd;AACD;AACF;AACF,KAVD;;AAWAT,IAAAA,GAAG,CAACU,IAAJ;AACD;AAED;AACF;AACA;;;AACUQ,EAAAA,KAAK,CAACD,IAAD,EAAyB;AACpC,UAAME,GAAG,GAAGC,IAAI,CAACF,KAAL,CAAWD,IAAX,CAAZ;AACA,UAAMI,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIN,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,GAAG,CAACG,YAAJ,CAAiBN,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CM,MAAAA,UAAU,CAACE,IAAX,CAAgBJ,GAAG,CAACG,YAAJ,CAAiBP,CAAjB,EAAoBS,IAApC;AACD;;AACD,WAAOH,UAAP;AACD;;AA5E6B","sourcesContent":["export default class Translator {\n\n  private url: string = \"https://api-free.deepl.com/v2/translate\";\n  private key: string = \"1fa4cd0a-7872-2cc0-e6e3-e96c6587ca62:fx\";\n\n  constructor(lang: string) {\n    this.url += `?auth_key=${this.key}&target_lang=${lang}`;\n  }\n\n  /**\n   * Smoketest for DeepL HTTP requests\n   */\n  // public testQuery(): boolean {\n  //   const xhr = new XMLHttpRequest();\n  //   let query = this.url + `&text=`;\n  //   xhr.open(\"GET\", query, false); // synchronous request\n  //   xhr.send(); \n  //   let status = xhr.status;\n  //   return status === 0 || (status >= 200 && status < 400);\n  // }\n\n  public checkUsage(): void {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", `https://api-free.deepl.com/v2/usage?auth_key=${this.key}`);\n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          console.log(\"DeepL Usage:\", xhr.responseText);\n        } else {\n          console.error(\"Usage retrieval failed.\")\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  /**\n   * Translate using DeepL via HTTP request\n   * @param texts List of strings to translate\n   * @param callBack Callback handling translated strings\n   */\n  public translate(\n    texts: string[], \n    callBack: (newTexts: string[]) => void,\n  ){\n    const xhr = new XMLHttpRequest();\n    let query = this.url;\n    for (let i=0; i<texts.length; i++) {\n      query += `&text=${texts[i]}`;\n    }\n    xhr.open(\"GET\", query); \n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          const json = xhr.responseText;\n          callBack(this.parse(json));\n        } else {\n          console.error(\"Translation failed.\")\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  /**\n   * Parse the JSON received from DeepL. Returns translated texts, as a list.\n   */\n  private parse(json: string): string[] {\n    const obj = JSON.parse(json);\n    const transTexts = [];\n    for (let i=0; i<obj.translations.length; i++) {\n      transTexts.push(obj.translations[i].text);\n    }\n    return transTexts;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}