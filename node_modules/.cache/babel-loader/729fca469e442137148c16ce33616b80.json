{"ast":null,"code":"import _classCallCheck from\"/Users/sallen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sallen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Translator=/*#__PURE__*/function(){function Translator(lang){_classCallCheck(this,Translator);this.url=\"https://api-free.deepl.com/v2/translate\";this.key=\"1fa4cd0a-7872-2cc0-e6e3-e96c6587ca62:fx\";this.url+=\"?auth_key=\".concat(this.key,\"&target_lang=\").concat(lang);}/**\n   * Smoketest for DeepL HTTP requests\n   */ // public testQuery(): boolean {\n//   const xhr = new XMLHttpRequest();\n//   let query = this.url + `&text=`;\n//   xhr.open(\"GET\", query, false); // synchronous request\n//   xhr.send(); \n//   let status = xhr.status;\n//   return status === 0 || (status >= 200 && status < 400);\n// }\n_createClass(Translator,[{key:\"checkUsage\",value:function checkUsage(){var xhr=new XMLHttpRequest();xhr.open(\"GET\",\"https://api-free.deepl.com/v2/usage?auth_key=\".concat(this.key));xhr.onload=function(){if(xhr.readyState===4){var status=xhr.status;if(status===0||status>=200&&status<400){console.log(\"DeepL Usage:\",xhr.responseText);}else{console.error(\"Usage retrieval failed.\");}}};xhr.send();}/**\n   * Translate using DeepL via HTTP request\n   * @param texts List of strings to translate\n   * @param callBack Callback handling translated strings\n   */},{key:\"translate\",value:function translate(texts,callBack){var _this=this;var xhr=new XMLHttpRequest();var query=this.url;for(var i=0;i<texts.length;i++){query+=\"&text=\".concat(texts[i]);}xhr.open(\"GET\",query);xhr.onload=function(){if(xhr.readyState===4){var status=xhr.status;if(status===0||status>=200&&status<400){var json=xhr.responseText;callBack(_this.parse(json));}else{console.error(\"Translation failed.\");}}};xhr.send();}/**\n   * Parse the JSON received from DeepL. Returns translated texts, as a list.\n   */},{key:\"parse\",value:function parse(json){var obj=JSON.parse(json);var transTexts=[];for(var i=0;i<obj.translations.length;i++){transTexts.push(obj.translations[i].text);}return transTexts;}}]);return Translator;}();export{Translator as default};","map":{"version":3,"sources":["/Users/sallen/Documents/GitHub/sdk_wayfinder/src/app/Translator.ts"],"names":["Translator","lang","url","key","xhr","XMLHttpRequest","open","onload","readyState","status","console","log","responseText","error","send","texts","callBack","query","i","length","json","parse","obj","JSON","transTexts","translations","push","text"],"mappings":"yQAAqBA,CAAAA,U,yBAKnB,oBAAYC,IAAZ,CAA0B,uCAHlBC,GAGkB,CAHJ,yCAGI,MAFlBC,GAEkB,CAFJ,yCAEI,CACxB,KAAKD,GAAL,sBAAyB,KAAKC,GAA9B,yBAAiDF,IAAjD,EACD,CAED;AACF;AACA,K,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;iDAEA,qBAA0B,CACxB,GAAMG,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAZ,CACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,wDAAgE,KAAKH,GAArE,GACAC,GAAG,CAACG,MAAJ,CAAa,UAAM,CACjB,GAAIH,GAAG,CAACI,UAAJ,GAAmB,CAAvB,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,GAAG,CAACK,MAAnB,CACA,GAAIA,MAAM,GAAK,CAAX,EAAiBA,MAAM,EAAI,GAAV,EAAiBA,MAAM,CAAG,GAA/C,CAAqD,CACnDC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BP,GAAG,CAACQ,YAAhC,EACD,CAFD,IAEO,CACLF,OAAO,CAACG,KAAR,CAAc,yBAAd,EACD,CACF,CACF,CATD,CAUAT,GAAG,CAACU,IAAJ,GACD,CAED;AACF;AACA;AACA;AACA,K,yBACE,mBACEC,KADF,CAEEC,QAFF,CAGC,gBACC,GAAMZ,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAZ,CACA,GAAIY,CAAAA,KAAK,CAAG,KAAKf,GAAjB,CACA,IAAK,GAAIgB,CAAAA,CAAC,CAAC,CAAX,CAAcA,CAAC,CAACH,KAAK,CAACI,MAAtB,CAA8BD,CAAC,EAA/B,CAAmC,CACjCD,KAAK,kBAAaF,KAAK,CAACG,CAAD,CAAlB,CAAL,CACD,CACDd,GAAG,CAACE,IAAJ,CAAS,KAAT,CAAgBW,KAAhB,EACAb,GAAG,CAACG,MAAJ,CAAa,UAAM,CACjB,GAAIH,GAAG,CAACI,UAAJ,GAAmB,CAAvB,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,GAAG,CAACK,MAAnB,CACA,GAAIA,MAAM,GAAK,CAAX,EAAiBA,MAAM,EAAI,GAAV,EAAiBA,MAAM,CAAG,GAA/C,CAAqD,CACnD,GAAMW,CAAAA,IAAI,CAAGhB,GAAG,CAACQ,YAAjB,CACAI,QAAQ,CAAC,KAAI,CAACK,KAAL,CAAWD,IAAX,CAAD,CAAR,CACD,CAHD,IAGO,CACLV,OAAO,CAACG,KAAR,CAAc,qBAAd,EACD,CACF,CACF,CAVD,CAWAT,GAAG,CAACU,IAAJ,GACD,CAED;AACF;AACA,K,qBACE,eAAcM,IAAd,CAAsC,CACpC,GAAME,CAAAA,GAAG,CAAGC,IAAI,CAACF,KAAL,CAAWD,IAAX,CAAZ,CACA,GAAMI,CAAAA,UAAU,CAAG,EAAnB,CACA,IAAK,GAAIN,CAAAA,CAAC,CAAC,CAAX,CAAcA,CAAC,CAACI,GAAG,CAACG,YAAJ,CAAiBN,MAAjC,CAAyCD,CAAC,EAA1C,CAA8C,CAC5CM,UAAU,CAACE,IAAX,CAAgBJ,GAAG,CAACG,YAAJ,CAAiBP,CAAjB,EAAoBS,IAApC,EACD,CACD,MAAOH,CAAAA,UAAP,CACD,C,iCA5EkBxB,U","sourcesContent":["export default class Translator {\n\n  private url: string = \"https://api-free.deepl.com/v2/translate\";\n  private key: string = \"1fa4cd0a-7872-2cc0-e6e3-e96c6587ca62:fx\";\n\n  constructor(lang: string) {\n    this.url += `?auth_key=${this.key}&target_lang=${lang}`;\n  }\n\n  /**\n   * Smoketest for DeepL HTTP requests\n   */\n  // public testQuery(): boolean {\n  //   const xhr = new XMLHttpRequest();\n  //   let query = this.url + `&text=`;\n  //   xhr.open(\"GET\", query, false); // synchronous request\n  //   xhr.send(); \n  //   let status = xhr.status;\n  //   return status === 0 || (status >= 200 && status < 400);\n  // }\n\n  public checkUsage(): void {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", `https://api-free.deepl.com/v2/usage?auth_key=${this.key}`);\n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          console.log(\"DeepL Usage:\", xhr.responseText);\n        } else {\n          console.error(\"Usage retrieval failed.\")\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  /**\n   * Translate using DeepL via HTTP request\n   * @param texts List of strings to translate\n   * @param callBack Callback handling translated strings\n   */\n  public translate(\n    texts: string[], \n    callBack: (newTexts: string[]) => void,\n  ){\n    const xhr = new XMLHttpRequest();\n    let query = this.url;\n    for (let i=0; i<texts.length; i++) {\n      query += `&text=${texts[i]}`;\n    }\n    xhr.open(\"GET\", query); \n    xhr.onload = () => {\n      if (xhr.readyState === 4) {\n        const status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          const json = xhr.responseText;\n          callBack(this.parse(json));\n        } else {\n          console.error(\"Translation failed.\")\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  /**\n   * Parse the JSON received from DeepL. Returns translated texts, as a list.\n   */\n  private parse(json: string): string[] {\n    const obj = JSON.parse(json);\n    const transTexts = [];\n    for (let i=0; i<obj.translations.length; i++) {\n      transTexts.push(obj.translations[i].text);\n    }\n    return transTexts;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}